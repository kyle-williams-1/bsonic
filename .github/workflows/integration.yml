name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  integration-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Start MongoDB with Docker Compose
      run: |
        # Start MongoDB with seed data
        docker compose up -d
        
        # Wait for MongoDB to be ready
        echo "Waiting for MongoDB to be ready..."
        timeout 60s bash -c 'until docker exec bsonic-mongodb mongosh -u admin -p password --authenticationDatabase admin --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 2; done'
        
        # Verify MongoDB is running
        docker exec bsonic-mongodb mongosh -u admin -p password --authenticationDatabase admin --eval "db.adminCommand(\"ping\")"
        
        # Check if data was seeded
        docker exec bsonic-mongodb mongosh -u admin -p password --authenticationDatabase admin bsonic_test --eval "db.users.countDocuments()"

    - name: Run integration tests
      run: go test -tags=integration -v ./integration/...
      env:
        MONGODB_URI: mongodb://admin:password@localhost:27017/bsonic_test?authSource=admin

    - name: Run integration tests with coverage
      run: |
        go test -tags=integration -v -coverprofile=integration_coverage.out ./integration/...
        go tool cover -html=integration_coverage.out -o integration_coverage.html
      env:
        MONGODB_URI: mongodb://admin:password@localhost:27017/bsonic_test?authSource=admin

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-coverage
        path: |
          integration_coverage.out
          integration_coverage.html

    - name: Cleanup
      if: always()
      run: |
        # Stop and remove containers
        docker compose down -v